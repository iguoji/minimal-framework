<?php
/**
 * 点击事件监听器
 */
class ClickEventListener
{
    public function events()
    {
        return [
            'MouseDown',
            'MouseUp',
        ];
    }
    public function handle(string $event, array $arguments = []) : bool
    {
        echo __METHOD__ . '::' . $event, PHP_EOL;
        return true;
    }
}

/**
 * 触摸事件监听器
 */
class TouchEventListener
{
    public function events()
    {
        return [
            // 在所有监听该事件的对象中，我优先级为100
            'TouchDown' => 100,
            'TouchUp',
        ];
    }
    public function handle(string $event, array $arguments = []) : bool
    {
        echo __METHOD__ . '::' . $event, PHP_EOL;
        return true;
    }
}

/**
 * 组合事件监听器
 */
class TapEventListener
{
    public function events()
    {
        return [
            'MouseDown',
            'MouseUp',
            'TouchDown',
            'TouchUp',
        ];
    }
    public function handle(string $event, array $arguments = []) : bool
    {
        echo __METHOD__ . '::' . $event, PHP_EOL;
        return true;
    }
}

/**
 * 应用程序
 */
class Application
{
    /**
     * 所有事件
     */
    public $events = [];

    /**
     * 监听类
     */
    public function listener(string $class) : void
    {
        $ins = new $class();
        foreach ($ins->events() as $key => $value) {
            if (is_string($key)) {
                $this->on($key, [$ins, 'handle'], $value);
            } else {
                $this->on($value, [$ins, 'handle'], 0);
            }
        }
    }

    /**
     * 监听事件
     */
    public function on(string $name, callable $callback, int $priority = 0) : void
    {
        if (!isset($this->events[$name])) {
            $this->events[$name] = [];
        }
        $index = count($this->events[$name]);
        foreach ($this->events[$name] as $key => $array) {
            if ($priority > $array['priority']) {
                $index = $key;
                break;
            }
        }
        array_splice($this->events[$name], $index, 0, [[
            'callable'  =>  $callback,
            'priority'  =>  $priority,
        ]]);
    }

    /**
     * 触发事件
     */
    public function trigger(string $name, array $arguments = []) : bool
    {
        $events = $this->events[$name] ?? [];
        foreach ($events as $key => $array) {
            $bool = call_user_func($array['callable'], $name, $arguments);
            if (false === $bool) {
                return false;
            }
        }
        return true;
    }
}






// 应用程序
$app = new Application();
// 监听所有类
$app->listener(TapEventListener::class);
$app->listener(ClickEventListener::class);
$app->listener(TouchEventListener::class);
// 触发事件
$app->trigger('MouseDown');
$app->trigger('TouchDown');